generator client {
  provider = "prisma-client-js"
  // output   = "../src/database/prisma/prisma-client-js"
}

// generator dbml {
//   provider   = "prisma-dbml-generator"
//   output     = "../src/database/dbml"
//   outputName = "bling.dbml"
// }

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "../src/database/docs"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Produto {
  id                    String    @id
  codigo                String
  descricao             String?
  tipo                  String?
  situacao              String?
  unidade               String?
  preco                 Float?
  precoCusto            Float?
  descricaoCurta        String?
  descricaoComplementar String?
  dataInclusao          DateTime?
  dataAlteracao         DateTime?
  imageThumbnail        String?
  urlVideo              String?
  nomeFornecedor        String?
  codigoFabricante      String?
  marca                 String?
  classFiscal           String?
  cest                  String?
  origem                Int?
  idGrupoProduto        Int?
  linkExterno           String?
  observacoes           String?
  grupoProduto          String?
  garantia              Int?
  descricaoFornecedor   String?
  idFabricante          Int?
  pesoLiq               Float?
  pesoBruto             Float?
  estoqueMinimo         Float?
  estoqueMaximo         Float?
  gtin                  String?
  gtinEmbalagem         String?
  larguraProduto        Float?
  alturaProduto         Float?
  profundidadeProduto   Float?
  unidadeMedida         String?
  itensPorCaixa         Int?
  volumes               Int?
  localizacao           String?
  crossdocking          Int?
  condicao              String?
  freteGratis           String?
  producao              String?
  dataValidade          DateTime?
  spedTipoItem          String?
  codigoPai             String?
  clonarDadosPai        String?

  categorias CategoriasNoProduto[] @relation()

  @@map("produto")
}

model CategoriasNoProduto {
  produto_id   String
  produto      Produto          @relation(fields: [produto_id], references: [id], onDelete: Cascade)
  categoria_id Int
  categoria    CategoriaProduto @relation(fields: [categoria_id], references: [id], onDelete: NoAction)

  @@id([produto_id, categoria_id])
  @@map("categorias_no_produto")
}

model CategoriaProduto {
  id        Int                   @id
  descricao String
  produtos  CategoriasNoProduto[]

  @@map("categoria_produto")
}

model Pedido {
  numero Int @id

  desconto          Float?
  observacoes       String?   @db.Text
  observacaointerna String?   @db.Text
  data              DateTime?
  dataSaida         DateTime?
  numeroOrdemCompra String?
  vendedor          String?
  valorfrete        Float?
  outrasdespesas    Float?
  totalprodutos     Float?
  totalvenda        Float?
  situacao          String?
  loja              String?
  numeroPedidoLoja  String?
  tipoIntegracao    String?

  // Cliente
  cliente_id Int
  cliente    Cliente @relation(fields: [cliente_id], references: [id], onDelete: Cascade)

  // Transportadora
  transportadora_id String?
  transportadora    Transportadora? @relation(fields: [transportadora_id], references: [cnpj], onDelete: Cascade)

  // EnderecoEntrega
  enderecoEntrega_id Int?
  enderecoEntrega    Endereco? @relation(fields: [enderecoEntrega_id], references: [id], onDelete: Cascade)

  // Volumes
  volume Volume[]

  // Parcelas
  parcelas Parcela[]

  // Nota
  nota Nota?

  // Produtos
  produtos ProdutoNoPedido[]

  @@map("pedido")
}

model Cliente {
  id               Int     @id
  nome             String
  tipoPessoa       String? @db.Char
  cpfCnpj          String?
  incricaoEstadual String?
  rg               String?
  contribuinte     String? @db.Char
  fone             String?
  celular          String?
  email            String?

  // Endere√ßo
  endereco_id Int
  endereco    Endereco? @relation(fields: [endereco_id], references: [id], onDelete: Cascade)

  // Pedido
  pedido Pedido[]
  @@map("cliente")
}

model Transportadora {
  cnpj             String  @id
  nome             String?
  tipo_frete       String?
  servico_correios String?

  pedido     Pedido[]
  NotaFiscal NotaFiscal[]
  @@map("transportadora")
}

model Endereco {
  id          Int     @id @default(autoincrement())
  nome        String?
  endereco    String?
  numero      String?
  complemento String?
  bairro      String?
  cep         String?
  cidade      String?
  uf          String?

  cliente Cliente[]
  pedido  Pedido[]
  @@map("endereco")
}

model Volume {

  id                   Int       @id @default(autoincrement())
  codigo               Int
  idServico            Int
  idOrigem             String?
  servico              String?
  codigoServico        String?
  codigoRastreamento   String?
  valorFretePrevisto   Float?
  remessaNumero        String?
  remessaDataCriacao   DateTime?
  dataSaida            DateTime?
  prazoEntregaPrevisto String?
  valorDeclarado       Float?
  avisoRecebimento     Boolean?
  maoPropria           Boolean?
  urlRastreamento      String?
  peso                 String?
  altura               String?
  largura              String?
  comprimento          String?
  diametro             String?

  // Pedido
  pedidoNumero Int
  pedido       Pedido @relation(fields: [pedidoNumero], references: [numero], onDelete: Cascade)

  @@map("volume")
}

model Parcela {
  id                         Int
  valor                      Float
  dataVencimento             DateTime
  obs                        String?
  destino                    String?
  formaPagamento_id          String
  formaPagamentoDescricao    String?
  formaPagamentoCodigoFiscal String?

  pedidoNumero Int
  pedido       Pedido @relation(fields: [pedidoNumero], references: [numero], onDelete: Cascade)

  @@id([id, pedidoNumero])
  @@map("parcela")
}

model Nota {
  numero      String    @id
  serie       String?
  dataEmissao DateTime?
  situacao    Int?
  valorNota   Float?
  chaveAcesso String?

  pedidoNumero Int    @unique
  pedido       Pedido @relation(fields: [pedidoNumero], references: [numero], onDelete: Cascade)

  @@map("nota")
}

model ProdutoNoPedido {
  id                 Int     @id @default(autoincrement())
  codigo             String?
  descricao          String?
  quantidade         Float?
  valorunidade       Float?
  precocusto         Float?
  descontoItem       Float?
  un                 String?
  pesoBruto          Float?
  largura            Float?
  altura             Float?
  profundidade       Float?
  unidadeMedida      String?
  descricaoDetalhada String?

  pedidoNumero Int?
  pedido       Pedido? @relation(fields: [pedidoNumero], references: [numero], onDelete: Cascade)

  @@map("produto_no_pedido")
}

model ContaReceber {

  id                 String    @id
  situacao           String?
  dataEmissao        DateTime?
  vencimentoOriginal DateTime?
  vencimento         DateTime?
  competencia        DateTime?
  nroDocumento       String?
  valor              Float?
  saldo              Float?
  historico          String?
  categoria          String?
  idFormaPagamento   String?
  portador           String?
  linkBoleto         String?
  vendedor           String?
  ocorrencia         String?

  cliente_id Int
  cliente    ClienteContaReceber @relation(fields: [cliente_id], references: [id], onDelete: Cascade)

  @@map("conta_a_receber")
}

model ClienteContaReceber {
  id           Int            @id @default(autoincrement())
  nome         String?
  tipoPessoa   String?
  cpf          String?
  rg           String?
  cnpj         String?
  ie           String?
  endereco     String?
  numero       Int?
  complemento  String?
  cidade       String?
  bairro       String?
  cep          String?
  uf           String?
  email        String?
  fone         String?
  celular      String?
  ContaReceber ContaReceber[]

  @@map("cliente_conta_receber")
}

model ContaPagar {
  id                 String    @id
  situacao           String?
  dataEmissao        DateTime?
  vencimentoOriginal DateTime?
  vencimento         DateTime?
  competencia        DateTime?
  nroDocumento       String?
  valor              Float?
  saldo              Float?
  historico          String?
  categoria          String?
  portador           String?
  ocorrencia         String?

  fornecedor_id Int
  fornecedor    FornecedorContaPagar @relation(fields: [fornecedor_id], references: [id], onDelete: Cascade)

  @@map("conta_a_pagar")
}

model FornecedorContaPagar {
  id          Int     @id @default(autoincrement())
  nome        String?
  tipoPessoa  String?
  cnpj        String?
  ie          String?
  cpf         String?
  rg          String?
  endereco    String?
  numero      Int?
  complemento String?
  cidade      String?
  bairro      String?
  cep         String?
  uf          String?
  email       String?
  fone        String?
  celular     String?

  ContaPagar ContaPagar[]
  @@map("fornecedor_conta_pagar")
}

model NotaFiscal {

  id               String   @id
  serie            String
  numero           String
  loja             String
  numeroPedidoLoja String
  tipo             String
  situacao         String
  contato          String
  cnpj             String
  vendedor         String
  dataEmissao      DateTime
  valorNota        Float
  chaveAcesso      String?
  xml              String?
  linkDanfe        String?
  linkPdf          String?

  transportadoraCnpj String?
  transportadora     Transportadora? @relation(fields: [transportadoraCnpj], references: [cnpj])

  clienteNotaCnpj String?
  cliente         ClienteNota? @relation(fields: [clienteNotaCnpj], references: [cnpj])

  @@map("nota_fiscal")
}

model ClienteNota {

  nome        String
  cnpj        String @id
  ie          String
  rg          String
  endereco    String
  numero      String
  complemento String
  cidade      String
  bairro      String
  cep         String
  uf          String
  email       String
  fone        String

  NotaFiscal NotaFiscal[]
  @@map("cliente_nota")
}

model Loja {
  id     Int    @id() @default(autoincrement())
  nome   String
  codigo Int

  @@map("loja")
}

model FormaDePagamento {
  id           Int    @id()
  descricao    String
  codigoFiscal Int
  padrao       Int
  situacao     Int
  fixa         Int

  @@map("forma_de_pagamento")
}
